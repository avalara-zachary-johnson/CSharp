using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FromTheDepthsUtility
{
    public static class FuelEngineMath
    {
        public static double HeatFactor(double heat)
        {
            return 1.0 - (Math.Pow(heat, 3.0) / 2.0);
        }

        public static (double[], double) CoolingRate(Cylinder[] cylinders, double h, double NumberOfRadiators = 0)
        {
            // h = heat generated by 1 fuel per second
            double radiatorCooling = 2.0 * Math.Pow((NumberOfRadiators / Convert.ToDouble(cylinders.Length)) * h, 0.5);
            return (
                cylinders.Select(
                    c => (4.0 * h * c.Exhausts) + 
                        (0.4 * h) +
                        (2 * c.Turbochargers) +
                        radiatorCooling
                ).ToArray(), 
                (1.0 + (0.01 * Math.Pow(NumberOfRadiators, 0.5)))
            );
        }

        // RPM = Relative RPM

        public static double CylinderBurnRate(double RPM, double injectors = 0, double carburetors = 0)
        {
            // Liters per second
            double BasicEngineCurve = 0.8 + (0.4 * RPM);

            if (injectors == 0 && carburetors == 0)
                return (10.0 * RPM) / (100.0 * 1.2 * BasicEngineCurve);
            else
                return ((injectors * RPM * 200.0) / (100.0 * 1.1 * BasicEngineCurve)) +
                    (RPM * BasicEngineCurve * carburetors);
        }

        public struct Cylinder
        {
            public double Exhausts;
            public double Turbochargers;
        }
    }

    public static class ElectricEngineMath
    {
        // Each cubic meter of battery can store 1000 kJ

        public static double MaxChargeConsumption(double charge, double powerOutput)
        {
            // kW / m^3
            return 0.4 * charge * powerOutput;
            // 40 at full charge.
        }

        public static double Efficiency(double powerOutput)
        {
            return 2.0 / (1.0 + powerOutput);
        }

        public static double MaxPowerOutput(double charge, double powerOutput)
        {
            return MaxChargeConsumption(charge, powerOutput) * Efficiency(powerOutput);
        }

        // RTGs cost 375 resources
        // Produce 25 battery power per second per cubic metre

        // b = volume ratio of batteries to RTGs
        // M is the factor between the maximum power output and the sustainable output
        // c = cost ratio of RTGs to batteries

        public static double MaxSustainableOutput(double powerOutput)
        {
            // Per cubic metre of RTG
            return 50.0 / (1.0 + powerOutput);
        }

        // Maximize ratio of power output to cost

        public static double CostRatio(double powerOutput, double headroom)
        {
            return (1.25 * (1.0 + headroom)) / Math.Pow(powerOutput, 2.0);
        }

        public static double PowerOutputForRatio(double headroom, double costRatio)
        {
            return Math.Pow((1.25 * (1.0 + headroom)) / costRatio, 0.5);
        }

        // For M = 1.2, and c = 18.75; powerOutput = 0.28 and battery ratio = 4.2
    }

    public static class SteamEngineMath
    {
        // Steam engine produces engine power + energy directly from resources
        // steam = m (mass in kilograms)
        // Pressure = P; production of power and energy, steam movement
        // Too much pressure can make things explode
        // Volume = V; steam containment

        // Steam is an ideal gas; (PV)/T = constant
        // Temperature = T (seems to be constant)
        // Pressure is directly proportional to density
        // PV = constant * m
        // (PV) / m = constant

        // PV = m in part, seems to work
        // Can set constant to 1 (velocity squared) for now

        // Boilers produce steam at a constant rate, as long as you have resources
        // Steam pipes have a volume of 0.2 m^3
        // A continuous pipe assembly has a common valume of the sum of its pipes
        // Pistons, turbines, open pipes, and pressure release valves consume steam
        // Gears and generators produce energy and power

        // Movement of steam is due to pressure differences
        // kg/s = pressure difference
        // Small boiler has a volume of 0.8 m^3 and produces 320 steam per second
        // Turbines have a volume of 0.8m^3 and consumed whatever they are given

        // Assume a simple engine of a boiler, combact turbine, and pipes
        // Pipe pressure = Turbine pressure + 320
        // Boiler pressure = Turbine pressure + 640
        // Add a small piston
        // Pipe pressure = Turbine pressure + 45
        // Turbine consumes 45 steam per second and piston consumes 275
        // Larger boilers need more time and pressure to push out steam

        // In a turbines-only setup, boiler pressure is triple its steam generation
        // Turbines produce energy and pistons produce engine power
        // Pistons don't have any volume or pressure, as they don't contain steam
        // Pistons produce power equal to half the steam consumed
        // Piston minimum RPM is proportional to pipe steam pressure
        // Pressure release valves always has a set perssure
    }
    
}
